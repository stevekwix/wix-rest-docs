{
  "name": "BackInStockNotificationRequestService",
  "client_id": "https://github.com/wix-private/ecom/tree/master/server/wix-ecommerce-server/wix-ecommerce-back-in-stock/back-in-stock-service#public",
  "memberOf": "All APIs",
  "category": "core",
  "mixes": [],
  "labels": [],
  "docs":   {
    "summary": "Manages BackInStockNotificationRequests - requests for notification about items, that were out of stock previously and now back in stock again.",
    "description": []
  },
  "properties": [],
  "tags":   [
        {
      "name": "BackInStockNotificationRequest",
      "entity": null
    },
        {
      "name": "BackInStockSettings",
      "entity": null
    }
  ],
  "relatedGuides":   [
        {
      "path": "../guides/backinstocknotificationrequestservice/docs/integration.md",
      "name": "Integration Guide"
    },
        {
      "path": "../guides/backinstocknotificationrequestservice/docs/README.md",
      "name": "Introduction"
    }
  ],
  "operations":   [
        {
      "name": "Create Back In Stock Notification Request",
      "methodName": "CreateBackInStockNotificationRequest",
      "serviceName": "BackInStockNotificationRequestService",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields":       [
        "request",
        "request.catalogReference",
        "request.catalogReference.catalogItemId",
        "request.catalogReference.appId",
        "request.email",
        "itemDetails",
        "itemDetails.name",
        "itemDetails.price"
      ],
      "params":       [
                {
          "in": "BODY",
          "name": "request",
          "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequest",
          "doc": " Notification request data (id is ignored, as it's generated by server)\n",
          "required": true
        },
                {
          "in": "BODY",
          "name": "itemDetails",
          "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockItemDetails",
          "doc": " Item data used in email and chat notifications\n",
          "required": true
        }
      ],
      "ret":       {
        "type":         {
          "name": "CreateBackInStockNotificationRequest",
          "statusCode": "200",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_CreateBackInStockNotificationRequestResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Create a BackInStockNotificationRequest. May not create new entry if there is existing non resolved request\n for same CatalogReference and email (will return existing request in response)\n \n",
        "description": [],
        "request": "POST",
        "url": "https://www.wixapis.com/back-in-stock-service/v1/back-in-stock-notification-requests",
        "links": [],
        "examples": [],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "CreateBackInStockNotificationRequestRequest",
        "rpcResponseName": "CreateBackInStockNotificationRequestResponse"
      },
      "customLabels": [{"id": "maturity-alpha"}]
    },
        {
      "name": "Delete Back In Stock Notification Request",
      "methodName": "DeleteBackInStockNotificationRequest",
      "serviceName": "BackInStockNotificationRequestService",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields": ["id"],
      "params": [      {
        "in": "PATH",
        "name": "id",
        "type": "string",
        "doc": " BackInStockNotificationRequest id\n",
        "required": true
      }],
      "ret":       {
        "type":         {
          "name": "DeleteBackInStockNotificationRequest",
          "statusCode": "200",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_DeleteBackInStockNotificationRequestResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Delete BackInStockNotificationRequest by id\n \n",
        "description": [],
        "request": "DELETE",
        "url": "https://www.wixapis.com/back-in-stock-service/v1/back-in-stock-notification-requests/{id}",
        "links": [],
        "examples": [],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "DeleteBackInStockNotificationRequestRequest",
        "rpcResponseName": "DeleteBackInStockNotificationRequestResponse"
      },
      "customLabels": [{"id": "maturity-alpha"}]
    },
        {
      "name": "Get Back In Stock Notification Request",
      "methodName": "GetBackInStockNotificationRequest",
      "serviceName": "BackInStockNotificationRequestService",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields": ["id"],
      "params": [      {
        "in": "PATH",
        "name": "id",
        "type": "string",
        "doc": " BackInStockNotificationRequest id\n",
        "required": true
      }],
      "ret":       {
        "type":         {
          "name": "GetBackInStockNotificationRequest",
          "statusCode": "200",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_GetBackInStockNotificationRequestResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Get BackInStockNotificationRequest by id\n \n",
        "description": [],
        "request": "GET",
        "url": "https://www.wixapis.com/back-in-stock-service/v1/back-in-stock-notification-requests/{id}",
        "links": [],
        "examples": [],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "GetBackInStockNotificationRequestRequest",
        "rpcResponseName": "GetBackInStockNotificationRequestResponse"
      },
      "customLabels": [{"id": "maturity-alpha"}]
    },
        {
      "name": "Get Back In Stock Notification Requests Count By Catalog References",
      "methodName": "GetBackInStockNotificationRequestsCountByCatalogReferences",
      "serviceName": "BackInStockNotificationRequestService",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields": ["catalogReferences"],
      "params": [      {
        "in": "QUERY",
        "name": "catalogReferences",
        "type":         {
          "name": "array",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wix_ecommerce_catalog_spi_api_v1_CatalogReference"]
        },
        "doc": " Back in stock requests to be counted identified by their CatalogReference.\n",
        "required": true
      }],
      "ret":       {
        "type":         {
          "name": "GetBackInStockNotificationRequestsCountByCatalogReferences",
          "statusCode": "200",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_GetBackInStockNotificationRequestsCountByCatalogReferencesResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": "/ Returns the number of BackInStockNotificationRequests for a given CatalogReferences.\n \n",
        "description": [],
        "request": "GET",
        "url": "https://www.wixapis.com/back-in-stock-service/v1/back-in-stock-notification-requests/count-by-catalog-reference",
        "links": [],
        "examples": [],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "GetBackInStockNotificationRequestsCountByCatalogReferencesRequest",
        "rpcResponseName": "GetBackInStockNotificationRequestsCountByCatalogReferencesResponse"
      },
      "customLabels": [{"id": "maturity-alpha"}]
    },
        {
      "name": "Get Settings",
      "methodName": "GetSettings",
      "serviceName": "BackInStockSettingsService",
      "tag": "BackInStockSettings",
      "permissions": [],
      "events": [],
      "labels": [],
      "nameParams": [],
      "params": [],
      "ret":       {
        "type":         {
          "name": "GetSettings",
          "statusCode": "200",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_GetSettingsResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Provides settings of given BackInStock TPA instance.\n \n",
        "description": [],
        "request": "PUT",
        "url": "https://www.wixapis.com/back-in-stock-service/v1/back-in-stock-notification-requests/settings",
        "links": [],
        "examples": [],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "GetSettingsRequest",
        "rpcResponseName": "GetSettingsResponse"
      },
      "customLabels": [{"id": "maturity-alpha"}]
    },
        {
      "name": "Mark As Notification Sent",
      "methodName": "MarkAsNotificationSent",
      "serviceName": "BackInStockNotificationRequestService",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields": ["id"],
      "params": [      {
        "in": "PATH",
        "name": "id",
        "type": "string",
        "doc": " BackInStockNotificationRequest id\n",
        "required": true
      }],
      "ret":       {
        "type":         {
          "name": "MarkAsNotificationSent",
          "statusCode": "200",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_MarkAsNotificationSentResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Update BackInStockNotificationRequest status to `NOTIFICATION_SENT`\n \n",
        "description": [],
        "request": "PUT",
        "url": "https://www.wixapis.com/back-in-stock-service/v1/back-in-stock-notification-requests/{id}/mark-as-notification-sent",
        "links": [],
        "examples": [],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "MarkAsNotificationSentRequest",
        "rpcResponseName": "MarkAsNotificationSentResponse"
      },
      "customLabels": [{"id": "maturity-alpha"}]
    },
        {
      "name": "Query Back In Stock Notification Requests",
      "methodName": "QueryBackInStockNotificationRequests",
      "serviceName": "BackInStockNotificationRequestService",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields": ["query"],
      "params":       [
                {
          "in": "QUERY",
          "name": "query.filter",
          "type": "struct",
          "doc": " Filter object.\n",
          "required": false
        },
                {
          "in": "QUERY",
          "name": "query.sort",
          "type":           {
            "name": "array",
            "typeParams": ["All APIs.BackInStockNotificationRequestService._wix_common_Sorting"]
          },
          "doc": " Sorting options. For example, `[{\"fieldName\":\"sortField1\"},{\"fieldName\":\"sortField2\",\"direction\":\"DESC\"}]`.\n",
          "required": false
        },
                {
          "in": "QUERY",
          "name": "query.pagingMethod",
          "type": "ref",
          "doc": "",
          "required": false
        }
      ],
      "ret":       {
        "type":         {
          "name": "QueryBackInStockNotificationRequests",
          "statusCode": "200",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_QueryBackInStockNotificationRequestsResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Returns BackInStockNotificationRequests matching given search parameters\n \n",
        "description": [],
        "request": "GET",
        "url": "https://www.wixapis.com/back-in-stock-service/v1/back-in-stock-notification-requests",
        "links": [],
        "examples": [],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "QueryBackInStockNotificationRequestsRequest",
        "rpcResponseName": "QueryBackInStockNotificationRequestsResponse"
      },
      "customLabels": [{"id": "maturity-alpha"}]
    },
        {
      "name": "Report Items Back In Stock",
      "methodName": "ReportItemsBackInStock",
      "serviceName": "BackInStockNotificationRequestService",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields":       [
        "itemDetails",
        "itemDetails.name",
        "itemDetails.price"
      ],
      "params":       [
                {
          "in": "BODY",
          "name": "catalogReference",
          "type": "All APIs.BackInStockNotificationRequestService._com_wix_ecommerce_catalog_spi_api_v1_CatalogReference",
          "doc": " Item identifier. All BackInStockNotificationRequests for this item identifier will be processed.\n Cannot be used with `request_ids`.\n",
          "required": false
        },
                {
          "in": "BODY",
          "name": "requestIds",
          "type":           {
            "name": "array",
            "typeParams": ["string"]
          },
          "doc": " Identifiers of BackInStockNotificationRequest that need to be handled.\n Cannot be used with `catalog_reference`.\n",
          "required": false
        },
                {
          "in": "BODY",
          "name": "itemDetails",
          "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockItemDetails",
          "doc": " Item data used in email and chat notifications.\n Item details values will also be passed into automation template which is used for actual back in stock notification to User of User\n (item_details.price will be passed as `item.price`, item_details.name - as `item.name`, item_details.image.url as `item.image.url`\n In case when automation template contains only [`item.price`, `item.name`, `item.image.url`] placeholders,\n `extra_automation_template_parameters` may be left empty\n In case when automation template is defined without using [`item.price`, `item.name`, `item.image.url`] placeholders,\n values should be passed in `extra_automation_template_parameters`\n",
          "required": true
        },
                {
          "in": "BODY",
          "name": "extraAutomationTemplateParameters",
          "type": "All APIs.BackInStockNotificationRequestService.extraAutomationTemplateParametersMapEntry",
          "doc": "Set of key-value pairs. Extra key-value pairs that will be passed to back in stock notification email template\n [`item.price`, `item.name`, `item.image.url`] placeholder values that are taken from item_details field may be overridden by values from this map\n",
          "required": false
        }
      ],
      "ret":       {
        "type":         {
          "name": "ReportItemsBackInStock",
          "statusCode": "200",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_ReportItemsBackInStockResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Will handle all BackInStockNotificationRequests referencing given item (if `catalog_reference` parameter is present)\n Otherwise (if `request_ids` parameter present) will handle BackInStockNotificationRequests with given ids\n \n",
        "description": [],
        "request": "POST",
        "url": "https://www.wixapis.com/back-in-stock-service/v1/back-in-stock-notification-requests/report-items-back-in-stock",
        "links": [],
        "examples": [],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "ReportItemsBackInStockRequest",
        "rpcResponseName": "ReportItemsBackInStockResponse"
      },
      "customLabels": [{"id": "maturity-alpha"}]
    },
        {
      "name": "Start Collecting Requests",
      "methodName": "StartCollectingRequests",
      "serviceName": "BackInStockSettingsService",
      "tag": "BackInStockSettings",
      "permissions": [],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields": ["appId"],
      "params": [      {
        "in": "BODY",
        "name": "appId",
        "type": "string",
        "doc": " Catalog appDefId whose products should be referenced by BackInStockNotificationRequest\n",
        "required": true
      }],
      "ret":       {
        "type":         {
          "name": "StartCollectingRequests",
          "statusCode": "200",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_StartCollectingRequestsResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Enables BackInStockNotificationRequest collection for all products of given catalog (StartCollectingRequestsRequest.app_id).\n BackInStockNotificationRequestService.CreateBackInStockNotificationRequest will throw errors when given BackInStockNotificationRequest\n for item from catalog which does not collect requests.\n \n",
        "description": [],
        "request": "POST",
        "url": "https://www.wixapis.com/back-in-stock-service/v1/back-in-stock-notification-requests/settings/start-collecting",
        "links": [],
        "examples": [],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "StartCollectingRequestsRequest",
        "rpcResponseName": "StartCollectingRequestsResponse"
      },
      "customLabels": [{"id": "maturity-alpha"}]
    },
        {
      "name": "Stop Collecting Requests",
      "methodName": "StopCollectingRequests",
      "serviceName": "BackInStockSettingsService",
      "tag": "BackInStockSettings",
      "permissions": [],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields": ["appId"],
      "params": [      {
        "in": "BODY",
        "name": "appId",
        "type": "string",
        "doc": " Catalog appDefId whose products shouldn't be referenced by BackInStockNotificationRequest\n",
        "required": true
      }],
      "ret":       {
        "type":         {
          "name": "StopCollectingRequests",
          "statusCode": "200",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_StopCollectingRequestsResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Disables BackInStockNotificationRequest collection for all products of given catalog (StartCollectingRequestsRequest.app_id)\n BackInStockNotificationRequestService.CreateBackInStockNotificationRequest will throw errors when given BackInStockNotificationRequest\n for item from catalog which does not collect requests.\n \n",
        "description": [],
        "request": "POST",
        "url": "https://www.wixapis.com/back-in-stock-service/v1/back-in-stock-notification-requests/settings/stop-collecting",
        "links": [],
        "examples": [],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "StopCollectingRequestsRequest",
        "rpcResponseName": "StopCollectingRequestsResponse"
      },
      "customLabels": [{"id": "maturity-alpha"}]
    }
  ],
  "events":   [
        {
      "type": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequest",
      "name": "Back In Stock Notification Request Webhook",
      "docs":       {
        "summary": "",
        "src": "https://github.com/wix-private/ecom/tree/master/server/wix-ecommerce-server/wix-ecommerce-back-in-stock/back-in-stock-service/proto/com/wixpress/ecom/back/in/stock/back_in_stock_notification_request_service.proto"
      },
      "topic": "invalidate-ssr-cache",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "customLabels": [{"id": "maturity-alpha"}]
    },
        {
      "type": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestDeletedDomainEvent",
      "name": "Back In Stock Notification Request Deleted Webhook",
      "docs":       {
        "summary": "",
        "src": "https://github.com/wix-private/ecom/tree/master/server/wix-ecommerce-server/wix-ecommerce-back-in-stock/back-in-stock-service/proto/com/wixpress/ecom/back/in/stock/back_in_stock_notification_request_service.proto"
      },
      "topic": "domain_events_wix.ecom.v1.back_in_stock_notification_request",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "customLabels": [{"id": "maturity-alpha"}],
      "eventType": "wix.ecom.v1.back_in_stock_notification_request_deleted",
      "extra": {"isDomainEvent": true}
    },
        {
      "type": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestCreatedDomainEvent",
      "name": "Back In Stock Notification Request Created Webhook",
      "docs":       {
        "summary": "",
        "src": "https://github.com/wix-private/ecom/tree/master/server/wix-ecommerce-server/wix-ecommerce-back-in-stock/back-in-stock-service/proto/com/wixpress/ecom/back/in/stock/back_in_stock_notification_request_service.proto"
      },
      "topic": "domain_events_wix.ecom.v1.back_in_stock_notification_request",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "customLabels": [{"id": "maturity-alpha"}],
      "eventType": "wix.ecom.v1.back_in_stock_notification_request_created",
      "extra": {"isDomainEvent": true}
    },
        {
      "type": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestUpdatedDomainEvent",
      "name": "Back In Stock Notification Request Updated Webhook",
      "docs":       {
        "summary": "",
        "src": "https://github.com/wix-private/ecom/tree/master/server/wix-ecommerce-server/wix-ecommerce-back-in-stock/back-in-stock-service/proto/com/wixpress/ecom/back/in/stock/back_in_stock_notification_request_service.proto"
      },
      "topic": "domain_events_wix.ecom.v1.back_in_stock_notification_request",
      "tag": "BackInStockNotificationRequest",
      "permissions": [],
      "customLabels": [{"id": "maturity-alpha"}],
      "eventType": "wix.ecom.v1.back_in_stock_notification_request_updated",
      "extra": {"isDomainEvent": true}
    }
  ],
  "callbacks": [],
  "messages":   [
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestDeletedDomainEvent",
      "displayName": "Back In Stock Notification Request Deleted Domain Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "id",
          "type": "string",
          "doc": "Unique event ID."
        },
                {
          "name": "entityFqdn",
          "type": "string",
          "doc": "Expected `wix.ecom.v1.back_in_stock_notification_request`.\nFully Qualified Domain Name."
        },
                {
          "name": "slug",
          "type": "string",
          "doc": "Expected `deleted`.\nEvent name."
        },
                {
          "name": "deletedEvent",
          "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestEntityDeletedEvent",
          "doc": "Event Info"
        },
                {
          "name": "entityId",
          "type": "string",
          "doc": "BackInStockNotificationRequest ID associated with this event."
        },
                {
          "name": "eventTime",
          "type": "string",
          "doc": "Event timestamp."
        },
                {
          "name": "triggeredByAnonymizeRequest",
          "type": "boolean",
          "doc": "Whether this event was triggered as a result of a privacy regulation application (e.g., GDPR)."
        },
                {
          "name": "originatedFrom",
          "type": "string",
          "doc": "If present, indicates the action that triggered the event."
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestEntityDeletedEvent",
      "displayName": "Back In Stock Notification Request Entity Deleted Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestCreatedDomainEvent",
      "displayName": "Back In Stock Notification Request Created Domain Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "id",
          "type": "string",
          "doc": "Unique event ID."
        },
                {
          "name": "entityFqdn",
          "type": "string",
          "doc": "Expected `wix.ecom.v1.back_in_stock_notification_request`.\nFully Qualified Domain Name."
        },
                {
          "name": "slug",
          "type": "string",
          "doc": "Expected `created`.\nEvent name."
        },
                {
          "name": "createdEvent",
          "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestEntityCreatedEvent",
          "doc": "Event Info"
        },
                {
          "name": "entityId",
          "type": "string",
          "doc": "BackInStockNotificationRequest ID associated with this event."
        },
                {
          "name": "eventTime",
          "type": "string",
          "doc": "Event timestamp."
        },
                {
          "name": "triggeredByAnonymizeRequest",
          "type": "boolean",
          "doc": "Whether this event was triggered as a result of a privacy regulation application (e.g., GDPR)."
        },
                {
          "name": "originatedFrom",
          "type": "string",
          "doc": "If present, indicates the action that triggered the event."
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestEntityCreatedEvent",
      "displayName": "Back In Stock Notification Request Entity Created Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "entity",
        "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequest",
        "doc": "Event body"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestUpdatedDomainEvent",
      "displayName": "Back In Stock Notification Request Updated Domain Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "id",
          "type": "string",
          "doc": "Unique event ID."
        },
                {
          "name": "entityFqdn",
          "type": "string",
          "doc": "Expected `wix.ecom.v1.back_in_stock_notification_request`.\nFully Qualified Domain Name."
        },
                {
          "name": "slug",
          "type": "string",
          "doc": "Expected `updated`.\nEvent name."
        },
                {
          "name": "updatedEvent",
          "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestEntityUpdatedEvent",
          "doc": "Event Info"
        },
                {
          "name": "entityId",
          "type": "string",
          "doc": "BackInStockNotificationRequest ID associated with this event."
        },
                {
          "name": "eventTime",
          "type": "string",
          "doc": "Event timestamp."
        },
                {
          "name": "triggeredByAnonymizeRequest",
          "type": "boolean",
          "doc": "Whether this event was triggered as a result of a privacy regulation application (e.g., GDPR)."
        },
                {
          "name": "originatedFrom",
          "type": "string",
          "doc": "If present, indicates the action that triggered the event."
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequestEntityUpdatedEvent",
      "displayName": "Back In Stock Notification Request Entity Updated Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "currentEntity",
        "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequest",
        "doc": "Event body"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockCollectionState",
      "displayName": "Back In Stock Collection State Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "appId",
          "type": "string",
          "doc": " Catalog appDefId which holds products that might be referenced by BackInStockNotificationRequest\n"
        },
                {
          "name": "collectingRequests",
          "type": "boolean",
          "doc": " Does site collect requests for items from catalog with given appDefId\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_Image",
      "displayName": "Image Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "id",
          "type": "string",
          "doc": " WixMedia image ID.\n"
        },
                {
          "name": "url",
          "type": "string",
          "doc": " Image URL.\n"
        },
                {
          "name": "height",
          "type": "integer",
          "doc": " Original image height.\n",
          "readOnly": true
        },
                {
          "name": "width",
          "type": "integer",
          "doc": " Original image width.\n",
          "readOnly": true
        },
                {
          "name": "altText",
          "type": "string",
          "doc": " Image alt text. Optional.\n"
        },
                {
          "name": "filename",
          "type": "string",
          "doc": " Image filename. Optional.\n",
          "readOnly": true
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockItemDetails",
      "displayName": "Back In Stock Item Details Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "name",
          "type": "string",
          "doc": " Item name\n"
        },
                {
          "name": "price",
          "type": "string",
          "doc": " Item price\n"
        },
                {
          "name": "image",
          "type": "All APIs.BackInStockNotificationRequestService._wix_common_Image",
          "doc": " Item image\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wix_ecommerce_catalog_spi_api_v1_CatalogReference",
      "displayName": "Catalog Reference Object",
      "locations": [],
      "docs":       {
        "summary": " Used for grouping line items and is sent on add to cart\n",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "catalogItemId",
          "type": "string",
          "doc": " ID of the item within its Wix or 3rd-party catalog. For example, `productId` for Wix Stores or `eventId` for Wix Events.\n"
        },
                {
          "name": "appId",
          "type": "string",
          "doc": " ID of the catalog app. For example, the Wix Stores `appId`, or the 3rd-party `appId`.\n"
        },
                {
          "name": "options",
          "type": "struct",
          "doc": " Additional info in key:value form. For example, `{\"options\":{\"Size\": \"M\", \"Color\": \"Red\"}}` or `{\"variantId\": \"<VARIANT_ID>\"}`.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationRequest",
      "displayName": "Back In Stock Notification Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "id",
          "type": "string",
          "doc": " Request id (autogenerated upon creation)\n",
          "readOnly": true
        },
                {
          "name": "catalogReference",
          "type": "All APIs.BackInStockNotificationRequestService._com_wix_ecommerce_catalog_spi_api_v1_CatalogReference",
          "doc": " Item identifier\n"
        },
                {
          "name": "email",
          "type": "string",
          "doc": " Email that will receive notification about item being back in stock\n"
        },
                {
          "name": "contactId",
          "type": "string",
          "doc": " Contact id (autogenerated upon creation) which is associated with given email. Will receive all notifications\n",
          "readOnly": true
        },
                {
          "name": "status",
          "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationStatusEnum_Status",
          "doc": " Request status\n",
          "readOnly": true
        },
                {
          "name": "autoNotified",
          "type": "boolean",
          "doc": " Describes how notification was made: automatically or manually by store owner\n",
          "readOnly": true
        },
                {
          "name": "createdDate",
          "type": "string",
          "doc": " Order creation date and time.\n",
          "readOnly": true
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_google_protobuf_Empty",
      "displayName": "Empty Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_domainevents_EntityCreatedEvent",
      "displayName": "Entity Created Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "entityAsJson",
        "type": "string",
        "doc": ""
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_domainevents_EntityUpdatedEvent",
      "displayName": "Entity Updated Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "currentEntityAsJson",
        "type": "string",
        "doc": " Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_domainevents_EntityDeletedEvent",
      "displayName": "Entity Deleted Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_domainevents_ActionEvent",
      "displayName": "Action Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "bodyAsJson",
        "type": "string",
        "doc": ""
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_domainevents_ExtendedFieldsUpdatedEvent",
      "displayName": "Extended Fields Updated Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "currentEntityAsJson",
        "type": "string",
        "doc": ""
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_domainevents_DomainEvent",
      "displayName": "Domain Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "id",
          "type": "string",
          "doc": " random GUID so clients can tell if event was already handled\n"
        },
                {
          "name": "entityFqdn",
          "type": "string",
          "doc": " Assumes actions are also always typed to an entity_type\n Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction\n"
        },
                {
          "name": "slug",
          "type": "string",
          "doc": " This is top level to ease client code dipatching of messages (switch on entity_fqdn+slug)\n This is although the created/updated/deleted notion is duplication of the oneof types\n Example: created/updated/deleted/started/completed/email_opened\n"
        },
                {
          "name": "entityId",
          "type": "string",
          "doc": " Assuming that all messages including Actions have id\n Example: The id of the specific order, the id of a specific campaign\n"
        },
                {
          "name": "body",
          "type": "All APIs.BackInStockNotificationRequestService._wix_common_domainevents_DomainEvent_body",
          "doc": ""
        },
                {
          "name": "eventTime",
          "type": "string",
          "doc": " The time of the event. Useful if there was a delay in dipatching\n"
        },
                {
          "name": "triggeredByAnonymizeRequest",
          "type": "boolean",
          "doc": " A field that should be set if this event was triggered by an anonymize request.\n For example you must set it to true when sending an event as a result of a GDPR right to be forgotten request.\n NOTE: This field is not relevant for `EntityCreatedEvent` but is located here for better ergonomics of consumers.\n"
        },
                {
          "name": "originatedFrom",
          "type": "string",
          "doc": " If present, indicates the action that triggered the event.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_domainevents_DomainEvent_body",
      "displayName": "body Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "createdEvent",
          "type": "All APIs.BackInStockNotificationRequestService._wix_common_domainevents_EntityCreatedEvent",
          "doc": ""
        },
                {
          "name": "updatedEvent",
          "type": "All APIs.BackInStockNotificationRequestService._wix_common_domainevents_EntityUpdatedEvent",
          "doc": ""
        },
                {
          "name": "deletedEvent",
          "type": "All APIs.BackInStockNotificationRequestService._wix_common_domainevents_EntityDeletedEvent",
          "doc": ""
        },
                {
          "name": "actionEvent",
          "type": "All APIs.BackInStockNotificationRequestService._wix_common_domainevents_ActionEvent",
          "doc": ""
        },
                {
          "name": "extendedFieldsUpdatedEvent",
          "type": "All APIs.BackInStockNotificationRequestService._wix_common_domainevents_ExtendedFieldsUpdatedEvent",
          "doc": ""
        }
      ],
      "enum": null,
      "extra": {},
      "labels": [],
      "oneOf": true
    },
        {
      "name": "_wix_common_CursorPaging",
      "displayName": "Cursor Paging Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "limit",
          "type": "integer",
          "doc": " Number of items to load.\n"
        },
                {
          "name": "cursor",
          "type": "string",
          "doc": "\nPointer to the next or previous page in the list of results.\n\nYou can get the relevant cursor token\nfrom the `pagingMetadata` object in the previous call's response.\nNot relevant for the first request.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_Cursors",
      "displayName": "Cursors Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "next",
          "type": "string",
          "doc": " Cursor pointing to next page in the list of results.\n"
        },
                {
          "name": "prev",
          "type": "string",
          "doc": " Cursor pointing to previous page in the list of results.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_Sorting",
      "displayName": "Sorting Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "fieldName",
          "type": "string",
          "doc": " Name of the field to sort by.\n"
        },
                {
          "name": "order",
          "type": "All APIs.BackInStockNotificationRequestService._wix_common_SortOrder",
          "doc": " Sort order.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wix_ecommerce_commons_api_PlatformPaging",
      "displayName": "Platform Paging Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "limit",
          "type": "integer",
          "doc": " Number of items to load.\n"
        },
                {
          "name": "offset",
          "type": "integer",
          "doc": " Number of items to skip in the current sort order.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wix_ecommerce_commons_api_PlatformQuery",
      "displayName": "Platform Query Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "filter",
          "type": "struct",
          "doc": " Filter object.\n"
        },
                {
          "name": "sort",
          "type":           {
            "name": "array",
            "typeParams": ["All APIs.BackInStockNotificationRequestService._wix_common_Sorting"]
          },
          "doc": " Sorting options. For example, `[{\"fieldName\":\"sortField1\"},{\"fieldName\":\"sortField2\",\"direction\":\"DESC\"}]`.\n"
        },
                {
          "name": "pagingMethod",
          "type": "All APIs.BackInStockNotificationRequestService._com_wix_ecommerce_commons_api_PlatformQuery_pagingMethod",
          "doc": ""
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wix_ecommerce_commons_api_PlatformQuery_pagingMethod",
      "displayName": "paging Method Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "paging",
          "type": "All APIs.BackInStockNotificationRequestService._com_wix_ecommerce_commons_api_PlatformPaging",
          "doc": " Pointer to page of results using offset. Cannot be used together with `cursorPaging`.\n"
        },
                {
          "name": "cursorPaging",
          "type": "All APIs.BackInStockNotificationRequestService._wix_common_CursorPaging",
          "doc": " Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": [],
      "oneOf": true
    },
        {
      "name": "_com_wix_ecommerce_commons_api_PlatformPagingMetadata",
      "displayName": "Platform Paging Metadata Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "count",
          "type": "integer",
          "doc": " The number of items returned in this response.\n"
        },
                {
          "name": "offset",
          "type": "integer",
          "doc": " The offset which was requested. Returned if offset paging was used.\n"
        },
                {
          "name": "total",
          "type": "integer",
          "doc": " The total number of items that match the query. Returned if offset paging was used.\n"
        },
                {
          "name": "cursors",
          "type": "All APIs.BackInStockNotificationRequestService._wix_common_Cursors",
          "doc": " Cursors to navigate through result pages. Returned if cursor paging was used.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_CreateBackInStockNotificationRequestRequest",
      "displayName": "Create Back In Stock Notification Request Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "request",
          "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequest",
          "doc": " Notification request data (id is ignored, as it's generated by server)\n"
        },
                {
          "name": "itemDetails",
          "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockItemDetails",
          "doc": " Item data used in email and chat notifications\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_CreateBackInStockNotificationRequestResponse",
      "displayName": "Create Back In Stock Notification Request Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "request",
        "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequest",
        "doc": " Created BackInStockNotificationRequest\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_GetBackInStockNotificationRequestRequest",
      "displayName": "Get Back In Stock Notification Request Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "id",
        "type": "string",
        "doc": " BackInStockNotificationRequest id\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_GetBackInStockNotificationRequestResponse",
      "displayName": "Get Back In Stock Notification Request Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "request",
        "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequest",
        "doc": " Requested BackInStockNotificationRequest\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_DeleteBackInStockNotificationRequestRequest",
      "displayName": "Delete Back In Stock Notification Request Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "id",
        "type": "string",
        "doc": " BackInStockNotificationRequest id\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_DeleteBackInStockNotificationRequestResponse",
      "displayName": "Delete Back In Stock Notification Request Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_MarkAsNotificationSentRequest",
      "displayName": "Mark As Notification Sent Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "id",
        "type": "string",
        "doc": " BackInStockNotificationRequest id\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_MarkAsNotificationSentResponse",
      "displayName": "Mark As Notification Sent Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "request",
        "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequest",
        "doc": " Updated BackInStockNotificationRequest\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_QueryBackInStockNotificationRequestsRequest",
      "displayName": "Query Back In Stock Notification Requests Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "query",
        "type": "All APIs.BackInStockNotificationRequestService._com_wix_ecommerce_commons_api_PlatformQuery",
        "doc": " Query options\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_QueryBackInStockNotificationRequestsResponse",
      "displayName": "Query Back In Stock Notification Requests Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "requests",
          "type":           {
            "name": "array",
            "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockNotificationRequest"]
          },
          "doc": " Matching BackInStockNotificationRequests\n"
        },
                {
          "name": "metadata",
          "type": "All APIs.BackInStockNotificationRequestService._com_wix_ecommerce_commons_api_PlatformPagingMetadata",
          "doc": " Details on the paged set of results returned.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_GetBackInStockNotificationRequestsCountByCatalogReferencesRequest",
      "displayName": "Get Back In Stock Notification Requests Count By Catalog References Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "catalogReferences",
        "type":         {
          "name": "array",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wix_ecommerce_catalog_spi_api_v1_CatalogReference"]
        },
        "doc": " Back in stock requests to be counted identified by their CatalogReference.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_GetBackInStockNotificationRequestsCountByCatalogReferencesResponse_BackInStockNotificationRequestsCount",
      "displayName": "Back In Stock Notification Requests Count Object",
      "locations": [],
      "docs":       {
        "summary": " Maps each back in stock CatalogReference to the results (the number of unique occurrences).\n",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "catalogReference",
          "type": "All APIs.BackInStockNotificationRequestService._com_wix_ecommerce_catalog_spi_api_v1_CatalogReference",
          "doc": ""
        },
                {
          "name": "count",
          "type": "integer",
          "doc": " The number of unique occurrences of back in stock requests for given CatalogReference.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_GetBackInStockNotificationRequestsCountByCatalogReferencesResponse",
      "displayName": "Get Back In Stock Notification Requests Count By Catalog References Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "countsPerCatalogReference",
        "type":         {
          "name": "array",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_GetBackInStockNotificationRequestsCountByCatalogReferencesResponse_BackInStockNotificationRequestsCount"]
        },
        "doc": ""
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "extraAutomationTemplateParametersMapEntry",
      "displayName": "extra Automation Template Parameters Map Entry Object",
      "locations": [],
      "docs":       {
        "summary": "Set of key-value pairs. Extra key-value pairs that will be passed to back in stock notification email template\n [`item.price`, `item.name`, `item.image.url`] placeholder values that are taken from item_details field may be overridden by values from this map\n",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "key:value",
        "type": "string",
        "doc": "`key` of type string, `value` of type string"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_ReportItemsBackInStockRequest",
      "displayName": "Report Items Back In Stock Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "catalogReference",
          "type": "All APIs.BackInStockNotificationRequestService._com_wix_ecommerce_catalog_spi_api_v1_CatalogReference",
          "doc": " Item identifier. All BackInStockNotificationRequests for this item identifier will be processed.\n Cannot be used with `request_ids`.\n"
        },
                {
          "name": "requestIds",
          "type":           {
            "name": "array",
            "typeParams": ["string"]
          },
          "doc": " Identifiers of BackInStockNotificationRequest that need to be handled.\n Cannot be used with `catalog_reference`.\n"
        },
                {
          "name": "itemDetails",
          "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockItemDetails",
          "doc": " Item data used in email and chat notifications.\n Item details values will also be passed into automation template which is used for actual back in stock notification to User of User\n (item_details.price will be passed as `item.price`, item_details.name - as `item.name`, item_details.image.url as `item.image.url`\n In case when automation template contains only [`item.price`, `item.name`, `item.image.url`] placeholders,\n `extra_automation_template_parameters` may be left empty\n In case when automation template is defined without using [`item.price`, `item.name`, `item.image.url`] placeholders,\n values should be passed in `extra_automation_template_parameters`\n"
        },
                {
          "name": "extraAutomationTemplateParameters",
          "type": "All APIs.BackInStockNotificationRequestService.extraAutomationTemplateParametersMapEntry",
          "doc": "Set of key-value pairs. Extra key-value pairs that will be passed to back in stock notification email template\n [`item.price`, `item.name`, `item.image.url`] placeholder values that are taken from item_details field may be overridden by values from this map\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_ReportItemsBackInStockResponse",
      "displayName": "Report Items Back In Stock Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockSettings",
      "displayName": "Back In Stock Settings Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "collectionStates",
        "type":         {
          "name": "array",
          "typeParams": ["All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockCollectionState"]
        },
        "doc": " Shows which catalogs have enabled back in stock request collection\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_GetSettingsRequest",
      "displayName": "Get Settings Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_GetSettingsResponse",
      "displayName": "Get Settings Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "settings",
        "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockSettings",
        "doc": " BackInStock settings of a given site\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_StartCollectingRequestsRequest",
      "displayName": "Start Collecting Requests Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "appId",
        "type": "string",
        "doc": " Catalog appDefId whose products should be referenced by BackInStockNotificationRequest\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_StartCollectingRequestsResponse",
      "displayName": "Start Collecting Requests Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "settings",
        "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockSettings",
        "doc": " BackInStock settings of a given site\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_StopCollectingRequestsRequest",
      "displayName": "Stop Collecting Requests Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "appId",
        "type": "string",
        "doc": " Catalog appDefId whose products shouldn't be referenced by BackInStockNotificationRequest\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_StopCollectingRequestsResponse",
      "displayName": "Stop Collecting Requests Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "settings",
        "type": "All APIs.BackInStockNotificationRequestService._com_wixpress_ecom_back_in_stock_BackInStockSettings",
        "doc": " BackInStock settings of a given site\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wixpress_ecom_back_in_stock_BackInStockNotificationStatusEnum_Status",
      "displayName": "Status Object",
      "locations": [],
      "docs":       {
        "summary": " \n Possible values are: <li><code> UNSPECIFIED <\/code><\/li><li><code> RECEIVED -  initial status of all new requests\n <\/code><\/li><li><code> PROCESSING <\/code><\/li><li><code> NOTIFICATION_SENT <\/code><\/li><li><code> FAILED <\/code><\/li>",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum":       [
        "UNSPECIFIED",
        "RECEIVED",
        "PROCESSING",
        "NOTIFICATION_SENT",
        "FAILED"
      ],
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_SortOrder",
      "displayName": "Sort Order Object",
      "locations": [],
      "docs":       {
        "summary": " \n Possible values are: <li><code> ASC <\/code><\/li><li><code> DESC <\/code><\/li>",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum":       [
        "ASC",
        "DESC"
      ],
      "extra": {},
      "labels": []
    }
  ],
  "extra": {"artifactId": "com.wixpress.ecom.back-in-stock-service"}
}